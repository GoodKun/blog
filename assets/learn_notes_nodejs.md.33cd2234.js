import{_ as s,c as a,o as n,N as l}from"./chunks/framework.0799945b.js";const A=JSON.parse('{"title":"Nodejs学习笔记","description":"","frontmatter":{},"headers":[],"relativePath":"learn/notes/nodejs.md"}'),o={name:"learn/notes/nodejs.md"},e=l(`<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07cfbc9237f64c00a930b74ba3c93027~tplv-k3u1fbpfcp-zoom-crop-mark:1512:1512:1512:851.awebp" alt="img"></p><h1 id="nodejs学习笔记" tabindex="-1">Nodejs学习笔记 <a class="header-anchor" href="#nodejs学习笔记" aria-label="Permalink to &quot;Nodejs学习笔记&quot;">​</a></h1><h2 id="一-什么是nodejs" tabindex="-1">一.什么是nodejs <a class="header-anchor" href="#一-什么是nodejs" aria-label="Permalink to &quot;一.什么是nodejs&quot;">​</a></h2><p>nodejs 是一个基于v8引擎的运行时环境</p><h3 id="_1-使用node管理工具" tabindex="-1">1.使用node管理工具 <a class="header-anchor" href="#_1-使用node管理工具" aria-label="Permalink to &quot;1.使用node管理工具&quot;">​</a></h3><p>node版本管理工具：n(不支持windows)，nvm-windows</p><ul><li>nvm list : 查看电脑上有哪些node 版本</li><li>nvm install 14.13.1 安装指定版本</li><li>nvm install lts 安装lts</li><li>nvm list available</li><li>nvm use 版本号 ：切换到 对对应的版本进行使用</li><li>nvm uninstall 版本号 : 卸载对应的版本</li></ul><h3 id="_2-node中的repl" tabindex="-1">2.Node中的REPL <a class="header-anchor" href="#_2-node中的repl" aria-label="Permalink to &quot;2.Node中的REPL&quot;">​</a></h3><ul><li>REPL是Read-Eval-Print Loop的简称，翻译为：&quot;读取-求值-输出 循环&quot;</li><li>是一个加简单的、交互式编程环境在node环境下执行代码</li></ul><h2 id="二-js模块化和node模块化" tabindex="-1">二.JS模块化和Node模块化 <a class="header-anchor" href="#二-js模块化和node模块化" aria-label="Permalink to &quot;二.JS模块化和Node模块化&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 清空控制台</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 打印函数的调用栈</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trance</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><h3 id="_1-commonjs" tabindex="-1">1.commonJs <a class="header-anchor" href="#_1-commonjs" aria-label="Permalink to &quot;1.commonJs&quot;">​</a></h3><blockquote><p>node实现commonjs就是对象的引用赋值(浅层拷贝)</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 导出</span></span>
<span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 引入</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./路径</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><blockquote><p>导出的本质上是：Module.export导出，一旦是 Module.expor导出，expor导出将不起作用 Node内部帮我们做了一件事：Module.export = export module.export 和export 以及require指向的都是同一块地址空间，但是当用module.export = {}进行对象的导出时，内存中会重新开辟一块内存进行导出，exports将失去效果。</p></blockquote><h3 id="require的核心模块" tabindex="-1">require的核心模块 <a class="header-anchor" href="#require的核心模块" aria-label="Permalink to &quot;require的核心模块&quot;">​</a></h3><h4 id="_1-没有后缀名的文件的查找顺序" tabindex="-1">1.没有后缀名的文件的查找顺序： <a class="header-anchor" href="#_1-没有后缀名的文件的查找顺序" aria-label="Permalink to &quot;1.没有后缀名的文件的查找顺序：&quot;">​</a></h4><ol><li>直接找文件X</li><li>查找X.js</li><li>查找X.json</li><li>查找X.node</li></ol><h4 id="_2-没有找到对应的文件" tabindex="-1">2.没有找到对应的文件 <a class="header-anchor" href="#_2-没有找到对应的文件" aria-label="Permalink to &quot;2.没有找到对应的文件&quot;">​</a></h4><p>查找目录下的index文件</p><ol><li>直接找文件X/index.js</li><li>查找X/index.js</li><li>查找X/index.json</li><li>查找Xindex.node</li></ol><p>node中的commonjs和加载过程同步</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./index.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">main的代码被执行了</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//先执行index.js 的文件再执行mian.js 中的代码</span></span></code></pre></div><h2 id="四、npm包管理" tabindex="-1">四、npm包管理 <a class="header-anchor" href="#四、npm包管理" aria-label="Permalink to &quot;四、npm包管理&quot;">​</a></h2><p><strong>Script:</strong></p><p>npm start和npm run start的区别是什么？</p><ul><li>它们是等价的；</li><li>对于常用的 start、 test、stop、restart可以省略掉run直接通过 npm start等方式运行；</li></ul><p><strong>semver版本规范</strong></p><p><strong>semver版本规范是X.Y.Z：</strong></p><ul><li>X主版本号（major）：当你做了不兼容的 API 修改（可能不兼容之前的版本）；</li><li>Y次版本号（minor）：当你做了向下兼容的功能性新增（新功能增加，但是兼容之前的版本）；</li><li>Z修订号（patch）：当你做了向下兼容的问题修正（没有新功能，修复了之前版本的bug）；</li></ul><blockquote><p>我们这里解释一下 ^和~的区别：</p></blockquote><blockquote><p>^x.y.z：表示x是保持不变的，y和z永远安装最新的版本；</p></blockquote><blockquote><p>~x.y.z：表示x和y保持不变的，z永远安装最新的版本；</p></blockquote><h2 id="五、创建自己的脚手架工具" tabindex="-1">五、创建自己的脚手架工具 <a class="header-anchor" href="#五、创建自己的脚手架工具" aria-label="Permalink to &quot;五、创建自己的脚手架工具&quot;">​</a></h2><h3 id="_1-通过自定义命令xyl执行入口文件index-js" tabindex="-1">1.通过自定义命令xyl执行入口文件index.js <a class="header-anchor" href="#_1-通过自定义命令xyl执行入口文件index-js" aria-label="Permalink to &quot;1.通过自定义命令xyl执行入口文件index.js&quot;">​</a></h3><p>创建好相应的项目，里面有<code>·index.js</code>入口文件</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/usr/bin/env node</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xyl cli</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>执行<code>npm init -y </code>初始化一个<code>package.json</code>文件,在里面配置</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">xyl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// xyl为命令</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// index.js 事要执行的文件</span></span></code></pre></div><p>这步不能省，执行npm link 命令，将我们的命令进行一个链接</p><p>再在终端种输入<code>xyl</code>,执行独对应的index文件</p><p><strong>2. 通过自定义的命令xyl --version查看版本号</strong> 在项目中先下载<code>commander</code></p><blockquote><p>npm install commander</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#!/usr/bin/env node</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> program </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">commander</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 查看版本号，通过require请求道package.json对象拿到version</span></span>
<span class="line"><span style="color:#A6ACCD;">program</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">version</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./package.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">version)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 通过process进程的参数解析我们输入的命令</span></span>
<span class="line"><span style="color:#A6ACCD;">program</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">args)</span></span></code></pre></div><p>执行xyl --version命令即显示版本号，xyl -- help命令默认</p><p><strong>3.其他选项</strong></p>`,46),p=[e];function t(c,r,i,d,y,D){return n(),a("div",null,p)}const C=s(o,[["render",t]]);export{A as __pageData,C as default};
